from fastapi import FastAPI, Form, HTTPException, Request
from fastapi.responses import JSONResponse
from transformers import pipeline
import re
import nltk
import pythainlp
from pythainlp.tokenize import word_tokenize
from linebot.models import MessageEvent, TextMessage, TextSendMessage
from linebot.exceptions import LineBotApiError, InvalidSignatureError
from linebot import LineBotApi, WebhookHandler

# Initialize FastAPI app
app = FastAPI()

# Initialize LineBot API and Webhook Handler
line_bot_api = LineBotApi("3Hh2AylEsGnyzZzqCXO8M8geW2w8LsjTLamhdPDPgDhR9BGIPhLlD/QrNaDqaFePyGbpWoAxYLi/yKGV7FT2PSigcnpeGhspHiVpNIDn6P5xosdPtPlHXevCSzl3G3U0Rhn6tFgKOhLlmkxjs9YkHgdB04t89/1O/w1cDnyilFU=")
handler = WebhookHandler("8425e5bab23fb36801b29f6c2c9e5778")

# Download NLTK resources
nltk.download('punkt')

# Load the MRC pipeline
mrcpipeline = pipeline("question-answering", model="MyMild/finetune_iapp_thaiqa")

# Define msm-related FAQs
msm_rules = {
    "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡∏π‡∏Å‡∏ö‡πâ‡∏≤‡∏ô ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡∏π‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡∏π‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£": """‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡∏π‡∏Å‡∏ö‡πâ‡∏≤‡∏ô
    1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ +"
    3. ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô

    ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á:
        - ‡πÉ‡∏´‡πâ‡∏ô‡∏≥‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏î‡∏±‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‚Ä¶ 
        - ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏£‡∏™‡πÅ‡∏ï‡∏°‡∏õ‡πå 30 ‡∏ö‡∏≤‡∏ó

    ‡∏Å‡∏£‡∏ì‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏≠‡∏≥‡∏ô‡∏≤‡∏à:
        - ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏°‡∏≠‡∏ö‡∏≠‡∏≥‡∏ô‡∏≤‡∏à ‡∏ï‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ 
        - ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô 
        - ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß 
        - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ô‡∏ö‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á

    ‡∏Å‡∏£‡∏ì‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤:
        - ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ Smarty Application 
        - ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô 
        - ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß 
        - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ô‡∏ö‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á
        - ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
    """,

    "SMARTY ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á ‡∏ü‡∏µ‡∏à‡πÄ‡∏à‡∏≠‡∏£‡πå": """‡∏ü‡∏µ‡∏à‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Smarty
    1. ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏°‡∏ô‡∏π "‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
    2. ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    3. ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á
    4. ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏ ‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
    """,

    "‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á" :"""‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô Smarty Applicantion ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞ """,

    "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏" : """Smarty Applicantion ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏ ‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)""",

    "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢": """‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞""",

    "‡∏™‡πÅ‡∏Å‡∏ô‡∏ö‡∏±‡∏ï‡∏£ ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô": """‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πÅ‡∏Å‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÑ‡∏î‡πâ (‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤ Error)
    ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó version ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    """,

    "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ": """‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Smarty ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ 
    ‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô Form ‡∏Ñ‡∏ô‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà Form Smart Living
    """,
   
    "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î": """‡∏Å‡∏£‡∏ì‡∏µ‡∏•‡∏π‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß 
    ‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô Form Smart Living
    """,

    "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì THANKS THX": """‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞ üôáüèª ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô MSMBot, Thanks you for using our MSMBotüíª
    """
}

# Preprocess msm rules keys for better matching
preprocessed_msm_rules = {pythainlp.util.normalize(keyword): answer for keyword, answer in msm_rules.items()}

# Create context from all answers in msm_rules
msm_context = ' '.join(preprocessed_msm_rules.values())


def find_similar_keywords(question: str, context: dict, threshold: float = 0.2) -> str:
    # Tokenize the question
    question_tokens = word_tokenize(question.lower())
    
    best_match = None
    highest_score = 0

    for key, value in context.items():
        key_tokens = word_tokenize(key.lower())
        
        # Calculate similarity score based on token overlap
        overlap = len(set(question_tokens) & set(key_tokens))
        score = overlap / len(key_tokens)  # Normalized by key length
        
        if score > highest_score and score >= threshold:
            highest_score = score
            best_match = value

    return best_match if best_match else "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâüôáüèªüôèüèª"


def handle_msm_question(question: str) -> str:
    # Normalize and preprocess the question
    question = question.strip()  # Remove leading/trailing spaces
    print(f"Received question: {question}")  # Log the raw question

    if not question or re.match(r'^[\W_]+$', question):  # Empty or special characters only
        print("Input is empty or contains only special characters.")  # Log case
        return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâüôáüèªüôèüèª"

    question = question.upper()
    print(f"Normalized question: {question}")  # Log the normalized question

    # First, check for an exact match in the FAQ rules (case insensitive)
    for key, answer in msm_rules.items():
        if pythainlp.util.normalize(question) == pythainlp.util.normalize(key):
            print(f"Exact match found: {key}")  # Log exact match
            return answer

    # Tokenize the question
    tokens = word_tokenize(question)
    print(f"Tokenized question: {tokens}")  # Log tokenized question

    # Try matching keywords using the improved similarity function
    matched_context = find_similar_keywords(question, msm_rules, threshold=0.2)
    if matched_context:
        print(f"Matched context: {matched_context}")  # Log matched context
        return matched_context

    # Fallback response if no match found
    print("No suitable answer found. Returning fallback response.")  # Log fallback
    return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâüôáüèªüôèüèª"


# FastAPI Endpoints

@app.get("/")
async def verify_line_webhook(request: Request):
    """Handle GET requests for webhook verification"""
    challenge = request.query_params.get("hub.challenge")
    if challenge:
        return JSONResponse(content={"challenge": challenge}, status_code=200)
    return JSONResponse(content={"message": "Welcome to the chatbot API"}, status_code=200)

@app.post("/msm")
async def msm_chatbot(request: Request):
    """Handle POST requests for the msm chatbot"""
    try:
        # Try to get data from multiple sources
        message = None
        
        # Check content type
        content_type = request.headers.get("content-type", "").lower()
        
        if "application/json" in content_type:
            # Handle JSON data
            body = await request.json()
            message = body.get("message")
        elif "application/x-www-form-urlencoded" in content_type or "multipart/form-data" in content_type:
            # Handle form data
            form = await request.form()
            message = form.get("message")
        else:
            # Try query parameters
            message = request.query_params.get("message")

        if not message:
            raise HTTPException(
                status_code=400,
                detail="Message not found. Please provide a message in the request body, form data, or query parameters."
            )

        print(f"Received message: {message}")  # Debug print
        answer = handle_msm_question(message)
        return {"answer": answer}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.post("/webhook")
async def line_webhook(request: Request):
    """Handle LINE Webhook"""
    try:
        body = await request.body()
        body_text = body.decode("utf-8")
        signature = request.headers.get("X-Line-Signature", "")

        try:
            handler.handle(body_text, signature)
        except InvalidSignatureError:
            raise HTTPException(status_code=400, detail="Invalid signature")
        except LineBotApiError as e:
            raise HTTPException(status_code=500, detail=str(e))
        
        return JSONResponse(content={"message": "OK"}, status_code=200)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# LINE bot message handler
@handler.add(MessageEvent, message=TextMessage)
def handle_text_message(event):
    """Handle LINE text messages"""
    try:
        user_message = event.message.text
        if not user_message:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="Please provide a valid question.")
            )
            return

        answer = handle_msm_question(user_message)
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=answer)
        )
    except Exception as e:
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=f"An error occurred: {str(e)}")
        )

# Add error handlers
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """Handle HTTP exceptions"""
    return JSONResponse(
        status_code=exc.status_code,
        content={"detail": exc.detail}
    )

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """Handle general exceptions"""
    return JSONResponse(
        status_code=500,
        content={"detail": "An internal server error occurred"}
    )

# Run the application
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
